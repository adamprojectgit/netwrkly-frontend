{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{createUserWithEmailAndPassword,signInWithEmailAndPassword,signOut,onAuthStateChanged,updateProfile}from'firebase/auth';import{auth}from'../config/firebase';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const API_URL='https://netwrkly-backend.onrender.com/api';const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);const[user,setUser]=useState(null);useEffect(()=>{const unsubscribe=onAuthStateChanged(auth,firebaseUser=>{if(firebaseUser){// Get the role from custom claims or default to CREATOR\nconst role=firebaseUser.role||'CREATOR';const userData={id:firebaseUser.uid,email:firebaseUser.email||'',role:role,emailVerified:firebaseUser.emailVerified};setUser(userData);setIsAuthenticated(true);}else{setUser(null);setIsAuthenticated(false);}});return()=>unsubscribe();},[]);const login=async(email,password)=>{const userCredential=await signInWithEmailAndPassword(auth,email,password);return userCredential;};const register=async(email,password,role)=>{try{// First create the user in Firebase\nconst userCredential=await createUserWithEmailAndPassword(auth,email,password);// Get the Firebase ID token\nconst idToken=await userCredential.user.getIdToken();// Then create the user in your backend\nawait axios.post(\"\".concat(API_URL,\"/auth/register\"),{email,role,firebaseUid:userCredential.user.uid},{headers:{Authorization:\"Bearer \".concat(idToken)}});// Store the role in Firebase profile\nawait updateProfile(userCredential.user,{displayName:role});return userCredential;}catch(error){console.error('Registration error:',error);throw error;}};const logout=async()=>{await signOut(auth);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isAuthenticated,user,login,register,logout},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","updateProfile","auth","axios","jsx","_jsx","API_URL","AuthContext","undefined","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","user","setUser","unsubscribe","firebaseUser","role","userData","id","uid","email","emailVerified","login","password","userCredential","register","idToken","getIdToken","post","concat","firebaseUid","headers","Authorization","displayName","error","console","logout","Provider","value","useAuth","context","Error"],"sources":["/Users/adambrown/Desktop/Netwrkly/src/netwrkly/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { \n    createUserWithEmailAndPassword, \n    signInWithEmailAndPassword, \n    signOut, \n    onAuthStateChanged,\n    updateProfile,\n    UserCredential\n} from 'firebase/auth';\nimport { auth } from '../config/firebase';\nimport axios from 'axios';\n\nconst API_URL = 'https://netwrkly-backend.onrender.com/api';\n\ninterface User {\n    id: string;\n    email: string;\n    role: 'CREATOR' | 'BRAND';\n    emailVerified: boolean;\n}\n\ninterface AuthContextType {\n    isAuthenticated: boolean;\n    user: User | null;\n    login: (email: string, password: string) => Promise<UserCredential>;\n    register: (email: string, password: string, role: 'CREATOR' | 'BRAND') => Promise<UserCredential>;\n    logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [user, setUser] = useState<User | null>(null);\n\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(auth, (firebaseUser) => {\n            if (firebaseUser) {\n                // Get the role from custom claims or default to CREATOR\n                const role = (firebaseUser as any).role || 'CREATOR';\n                const userData: User = {\n                    id: firebaseUser.uid,\n                    email: firebaseUser.email || '',\n                    role: role as 'CREATOR' | 'BRAND',\n                    emailVerified: firebaseUser.emailVerified\n                };\n                setUser(userData);\n                setIsAuthenticated(true);\n            } else {\n                setUser(null);\n                setIsAuthenticated(false);\n            }\n        });\n\n        return () => unsubscribe();\n    }, []);\n\n    const login = async (email: string, password: string) => {\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\n        return userCredential;\n    };\n\n    const register = async (email: string, password: string, role: 'CREATOR' | 'BRAND') => {\n        try {\n            // First create the user in Firebase\n            const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n            \n            // Get the Firebase ID token\n            const idToken = await userCredential.user.getIdToken();\n            \n            // Then create the user in your backend\n            await axios.post(`${API_URL}/auth/register`, {\n                email,\n                role,\n                firebaseUid: userCredential.user.uid\n            }, {\n                headers: {\n                    Authorization: `Bearer ${idToken}`\n                }\n            });\n\n            // Store the role in Firebase profile\n            await updateProfile(userCredential.user, {\n                displayName: role\n            });\n\n            return userCredential;\n        } catch (error: any) {\n            console.error('Registration error:', error);\n            throw error;\n        }\n    };\n\n    const logout = async () => {\n        await signOut(auth);\n    };\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, user, login, register, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}