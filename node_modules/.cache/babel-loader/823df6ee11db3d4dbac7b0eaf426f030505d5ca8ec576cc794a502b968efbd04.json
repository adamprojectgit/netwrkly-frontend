{"ast":null,"code":"import _objectSpread from\"/Users/adambrown/Desktop/Netwrkly/src/netwrkly/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';import{getAuthToken}from'../utils/auth';const API_URL='/api/brand-profile';export const profileService={async getProfile(){try{const response=await axios.get(API_URL,{headers:{'Authorization':\"Bearer \".concat(getAuthToken())}});// Ensure preferredNiches is always an array\nreturn _objectSpread(_objectSpread({},response.data),{},{preferredNiches:response.data.preferredNiches||[]});}catch(error){console.error('Error fetching profile:',error);throw error;}},async updateProfile(profileData){try{const response=await axios.post(API_URL,profileData,{headers:{'Authorization':\"Bearer \".concat(getAuthToken()),'Content-Type':'application/json'}});return response.data;}catch(error){console.error('Error updating profile:',error);throw error;}},async uploadLogo(file){try{const formData=new FormData();formData.append('file',file);const response=await axios.post(\"\".concat(API_URL,\"/logo\"),formData,{headers:{'Authorization':\"Bearer \".concat(getAuthToken()),'Content-Type':'multipart/form-data'}});return response.data;}catch(error){console.error('Error uploading logo:',error);throw error;}},async deleteLogo(filename){try{await axios.delete(\"\".concat(API_URL,\"/logo/\").concat(filename),{headers:{'Authorization':\"Bearer \".concat(getAuthToken())}});}catch(error){console.error('Error deleting logo:',error);throw error;}}};","map":{"version":3,"names":["axios","getAuthToken","API_URL","profileService","getProfile","response","get","headers","concat","_objectSpread","data","preferredNiches","error","console","updateProfile","profileData","post","uploadLogo","file","formData","FormData","append","deleteLogo","filename","delete"],"sources":["/Users/adambrown/Desktop/Netwrkly/src/netwrkly/frontend/src/services/profileService.ts"],"sourcesContent":["import axios from 'axios';\nimport { getAuthToken } from '../utils/auth';\n\nexport interface BrandProfileData {\n    id?: number;\n    companyName: string;\n    description: string;\n    industry: string;\n    website: string;\n    preferredNiches: string[];\n    logoUrl: string;\n}\n\nconst API_URL = '/api/brand-profile';\n\nexport const profileService = {\n    async getProfile(): Promise<BrandProfileData> {\n        try {\n            const response = await axios.get(API_URL, {\n                headers: {\n                    'Authorization': `Bearer ${getAuthToken()}`\n                }\n            });\n            // Ensure preferredNiches is always an array\n            return {\n                ...response.data,\n                preferredNiches: response.data.preferredNiches || []\n            };\n        } catch (error) {\n            console.error('Error fetching profile:', error);\n            throw error;\n        }\n    },\n\n    async updateProfile(profileData: BrandProfileData): Promise<BrandProfileData> {\n        try {\n            const response = await axios.post(API_URL, profileData, {\n                headers: {\n                    'Authorization': `Bearer ${getAuthToken()}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Error updating profile:', error);\n            throw error;\n        }\n    },\n\n    async uploadLogo(file: File): Promise<string> {\n        try {\n            const formData = new FormData();\n            formData.append('file', file);\n\n            const response = await axios.post(`${API_URL}/logo`, formData, {\n                headers: {\n                    'Authorization': `Bearer ${getAuthToken()}`,\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Error uploading logo:', error);\n            throw error;\n        }\n    },\n\n    async deleteLogo(filename: string): Promise<void> {\n        try {\n            await axios.delete(`${API_URL}/logo/${filename}`, {\n                headers: {\n                    'Authorization': `Bearer ${getAuthToken()}`\n                }\n            });\n        } catch (error) {\n            console.error('Error deleting logo:', error);\n            throw error;\n        }\n    }\n}; "],"mappings":"4IAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,YAAY,KAAQ,eAAe,CAY5C,KAAM,CAAAC,OAAO,CAAG,oBAAoB,CAEpC,MAAO,MAAM,CAAAC,cAAc,CAAG,CAC1B,KAAM,CAAAC,UAAUA,CAAA,CAA8B,CAC1C,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACM,GAAG,CAACJ,OAAO,CAAE,CACtCK,OAAO,CAAE,CACL,eAAe,WAAAC,MAAA,CAAYP,YAAY,CAAC,CAAC,CAC7C,CACJ,CAAC,CAAC,CACF;AACA,OAAAQ,aAAA,CAAAA,aAAA,IACOJ,QAAQ,CAACK,IAAI,MAChBC,eAAe,CAAEN,QAAQ,CAACK,IAAI,CAACC,eAAe,EAAI,EAAE,GAE5D,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACf,CACJ,CAAC,CAED,KAAM,CAAAE,aAAaA,CAACC,WAA6B,CAA6B,CAC1E,GAAI,CACA,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACgB,IAAI,CAACd,OAAO,CAAEa,WAAW,CAAE,CACpDR,OAAO,CAAE,CACL,eAAe,WAAAC,MAAA,CAAYP,YAAY,CAAC,CAAC,CAAE,CAC3C,cAAc,CAAE,kBACpB,CACJ,CAAC,CAAC,CACF,MAAO,CAAAI,QAAQ,CAACK,IAAI,CACxB,CAAE,MAAOE,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACf,CACJ,CAAC,CAED,KAAM,CAAAK,UAAUA,CAACC,IAAU,CAAmB,CAC1C,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,IAAI,CAAC,CAE7B,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACgB,IAAI,IAAAR,MAAA,CAAIN,OAAO,UAASiB,QAAQ,CAAE,CAC3DZ,OAAO,CAAE,CACL,eAAe,WAAAC,MAAA,CAAYP,YAAY,CAAC,CAAC,CAAE,CAC3C,cAAc,CAAE,qBACpB,CACJ,CAAC,CAAC,CACF,MAAO,CAAAI,QAAQ,CAACK,IAAI,CACxB,CAAE,MAAOE,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,CAAAA,KAAK,CACf,CACJ,CAAC,CAED,KAAM,CAAAU,UAAUA,CAACC,QAAgB,CAAiB,CAC9C,GAAI,CACA,KAAM,CAAAvB,KAAK,CAACwB,MAAM,IAAAhB,MAAA,CAAIN,OAAO,WAAAM,MAAA,CAASe,QAAQ,EAAI,CAC9ChB,OAAO,CAAE,CACL,eAAe,WAAAC,MAAA,CAAYP,YAAY,CAAC,CAAC,CAC7C,CACJ,CAAC,CAAC,CACN,CAAE,MAAOW,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CACf,CACJ,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}