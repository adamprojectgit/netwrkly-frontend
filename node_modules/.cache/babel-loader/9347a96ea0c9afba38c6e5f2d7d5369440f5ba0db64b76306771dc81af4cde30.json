{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{profileService}from'../services/profileService';import{jsx as _jsx}from\"react/jsx-runtime\";const BrandProfileContext=/*#__PURE__*/createContext(undefined);export const useBrandProfile=()=>{const context=useContext(BrandProfileContext);if(context===undefined){throw new Error('useBrandProfile must be used within a BrandProfileProvider');}return context;};export const BrandProfileProvider=_ref=>{let{children}=_ref;const[profile,setProfile]=useState(null);const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const loadProfile=async()=>{try{setIsLoading(true);setError(null);const data=await profileService.getProfile();setProfile(data);}catch(err){console.error('Error loading profile:',err);setError('Failed to load profile');// Set a default empty profile to prevent infinite loading\nsetProfile({companyName:'',description:'',industry:'',website:'',preferredNiches:[],logoUrl:''});}finally{setIsLoading(false);}};const updateProfile=async profileData=>{try{setIsLoading(true);setError(null);await profileService.updateProfile(profileData);setProfile(profileData);}catch(err){console.error('Error updating profile:',err);setError('Failed to update profile');throw err;}finally{setIsLoading(false);}};const refreshProfile=async()=>{await loadProfile();};useEffect(()=>{loadProfile();},[]);return/*#__PURE__*/_jsx(BrandProfileContext.Provider,{value:{profile,isLoading,error,updateProfile,refreshProfile},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","profileService","jsx","_jsx","BrandProfileContext","undefined","useBrandProfile","context","Error","BrandProfileProvider","_ref","children","profile","setProfile","isLoading","setIsLoading","error","setError","loadProfile","data","getProfile","err","console","companyName","description","industry","website","preferredNiches","logoUrl","updateProfile","profileData","refreshProfile","Provider","value"],"sources":["/Users/adambrown/Desktop/Netwrkly/src/netwrkly/frontend/src/contexts/BrandProfileContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { BrandProfileData } from '../types/profile';\nimport { profileService } from '../services/profileService';\n\ninterface BrandProfileContextType {\n  profile: BrandProfileData | null;\n  isLoading: boolean;\n  error: string | null;\n  updateProfile: (profileData: BrandProfileData) => Promise<void>;\n  refreshProfile: () => Promise<void>;\n}\n\nconst BrandProfileContext = createContext<BrandProfileContextType | undefined>(undefined);\n\nexport const useBrandProfile = () => {\n  const context = useContext(BrandProfileContext);\n  if (context === undefined) {\n    throw new Error('useBrandProfile must be used within a BrandProfileProvider');\n  }\n  return context;\n};\n\ninterface BrandProfileProviderProps {\n  children: ReactNode;\n}\n\nexport const BrandProfileProvider: React.FC<BrandProfileProviderProps> = ({ children }) => {\n  const [profile, setProfile] = useState<BrandProfileData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadProfile = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const data = await profileService.getProfile();\n      setProfile(data);\n    } catch (err) {\n      console.error('Error loading profile:', err);\n      setError('Failed to load profile');\n      // Set a default empty profile to prevent infinite loading\n      setProfile({\n        companyName: '',\n        description: '',\n        industry: '',\n        website: '',\n        preferredNiches: [],\n        logoUrl: '',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateProfile = async (profileData: BrandProfileData) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      await profileService.updateProfile(profileData);\n      setProfile(profileData);\n    } catch (err) {\n      console.error('Error updating profile:', err);\n      setError('Failed to update profile');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refreshProfile = async () => {\n    await loadProfile();\n  };\n\n  useEffect(() => {\n    loadProfile();\n  }, []);\n\n  return (\n    <BrandProfileContext.Provider\n      value={{\n        profile,\n        isLoading,\n        error,\n        updateProfile,\n        refreshProfile\n      }}\n    >\n      {children}\n    </BrandProfileContext.Provider>\n  );\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAExF,OAASC,cAAc,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAU5D,KAAM,CAAAC,mBAAmB,cAAGP,aAAa,CAAsCQ,SAAS,CAAC,CAEzF,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CACnC,KAAM,CAAAC,OAAO,CAAGT,UAAU,CAACM,mBAAmB,CAAC,CAC/C,GAAIG,OAAO,GAAKF,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAG,KAAK,CAAC,4DAA4D,CAAC,CAC/E,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAMD,MAAO,MAAM,CAAAE,oBAAyD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpF,KAAM,CAACE,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAA0B,IAAI,CAAC,CACrE,KAAM,CAACe,SAAS,CAAEC,YAAY,CAAC,CAAGhB,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACiB,KAAK,CAAEC,QAAQ,CAAC,CAAGlB,QAAQ,CAAgB,IAAI,CAAC,CAEvD,KAAM,CAAAmB,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAI,CACFH,YAAY,CAAC,IAAI,CAAC,CAClBE,QAAQ,CAAC,IAAI,CAAC,CACd,KAAM,CAAAE,IAAI,CAAG,KAAM,CAAAlB,cAAc,CAACmB,UAAU,CAAC,CAAC,CAC9CP,UAAU,CAACM,IAAI,CAAC,CAClB,CAAE,MAAOE,GAAG,CAAE,CACZC,OAAO,CAACN,KAAK,CAAC,wBAAwB,CAAEK,GAAG,CAAC,CAC5CJ,QAAQ,CAAC,wBAAwB,CAAC,CAClC;AACAJ,UAAU,CAAC,CACTU,WAAW,CAAE,EAAE,CACfC,WAAW,CAAE,EAAE,CACfC,QAAQ,CAAE,EAAE,CACZC,OAAO,CAAE,EAAE,CACXC,eAAe,CAAE,EAAE,CACnBC,OAAO,CAAE,EACX,CAAC,CAAC,CACJ,CAAC,OAAS,CACRb,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAAc,aAAa,CAAG,KAAO,CAAAC,WAA6B,EAAK,CAC7D,GAAI,CACFf,YAAY,CAAC,IAAI,CAAC,CAClBE,QAAQ,CAAC,IAAI,CAAC,CACd,KAAM,CAAAhB,cAAc,CAAC4B,aAAa,CAACC,WAAW,CAAC,CAC/CjB,UAAU,CAACiB,WAAW,CAAC,CACzB,CAAE,MAAOT,GAAG,CAAE,CACZC,OAAO,CAACN,KAAK,CAAC,yBAAyB,CAAEK,GAAG,CAAC,CAC7CJ,QAAQ,CAAC,0BAA0B,CAAC,CACpC,KAAM,CAAAI,GAAG,CACX,CAAC,OAAS,CACRN,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAAgB,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,KAAM,CAAAb,WAAW,CAAC,CAAC,CACrB,CAAC,CAEDlB,SAAS,CAAC,IAAM,CACdkB,WAAW,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEf,IAAA,CAACC,mBAAmB,CAAC4B,QAAQ,EAC3BC,KAAK,CAAE,CACLrB,OAAO,CACPE,SAAS,CACTE,KAAK,CACLa,aAAa,CACbE,cACF,CAAE,CAAApB,QAAA,CAEDA,QAAQ,CACmB,CAAC,CAEnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}